package interpreter.tree;

import renderable.RenderableBlock;
import workspace.Console;
import codeblocks.Block;

/**
 * This class is responsible for parsing a program given by the workspace.
 * @author Brandon Oubre
 */
public class Parser {
	//private Program tree;
	private Iterable<RenderableBlock> setupTopBlocks = null;
	//private Iterable<RenderableBlock> runtimeTopBlocks = null;
	
	/**
	 * Create a new parser.
	 * @param setupTopBlocks The top-level blocks from the setup page.
	 * @param runtimeTopBlocks The top-level blocks from the runtime page.
	 */
	public Parser(Iterable<RenderableBlock> setupTopBlocks, Iterable<RenderableBlock> runtimeTopBlocks) {
		this.setupTopBlocks = setupTopBlocks;
		//this.runtimeTopBlocks = runtimeTopBlocks;
	}
	
	/**
	 * Parse the given program.
	 * Errors and warnings will be raised to the console.
	 * @return <tt>null</tt> if the parse fails. Otherwise returns the {@link Program} (parse tree) generated by the parse.
	 */
	public Program parse() {
		//Do we have a program to parse?
		if (setupTopBlocks == null) {
			Console.getInstance().appendLine("<span class=\"error\">Parse Error: No program to parse.</span>");
			return null;
		}
		
		//Find the setup block.
		Setup setup = null;
		for (RenderableBlock rb : setupTopBlocks) {
			Block b = rb.getBlock();
			if (b.getGenusName().equals("setup")) {
				if (setup == null) {
					setup = new Setup(b);
				} else {
					Console.getInstance().appendLine("<span class=\"error\">Parse Error: Duplicate setup blocks.</span>");
					return null;
				}
			} else {
				Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: Orphaned top-level blocks will not be executed.</span>");
			}
		}
		if (setup == null) {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: No setup block. Assuming no setup routine.</span>");
		}
		
		
		return null;
	}
}
