package interpreter.tree;

import renderable.RenderableBlock;
import workspace.Console;
import codeblocks.Block;
import codeblocks.BlockConnector;

/**
 * This class is responsible for parsing a program given by the workspace.
 * @author Brandon Oubre
 */
public class Parser {
	/*
	 * Default results for missing arguments.
	 */
	private static final StringResult DEFAULT_STRING_RESULT = () -> "";
	private static final BooleanResult DEFAULT_BOOLEAN_RESULT = () -> false;
	private static final NumberResult DEFAULT_NUMBER_RESULT = () -> 0;
	
	/*
	 * The top-level blocks for each page.
	 */
	private Iterable<RenderableBlock> setupTopBlocks = null;
	//private Iterable<RenderableBlock> runtimeTopBlocks = null;
	
	/**
	 * Create a new parser.
	 * @param setupTopBlocks The top-level blocks from the setup page.
	 * @param runtimeTopBlocks The top-level blocks from the runtime page.
	 */
	public Parser(Iterable<RenderableBlock> setupTopBlocks, Iterable<RenderableBlock> runtimeTopBlocks) {
		this.setupTopBlocks = setupTopBlocks;
		//this.runtimeTopBlocks = runtimeTopBlocks;
	}
	
	/**
	 * Parse the given program.
	 * Errors and warnings will be raised to the console.
	 * @return <tt>null</tt> if the parse fails. Otherwise returns the {@link Program} (parse tree) generated by the parse.
	 */
	public Program parse() {
		//Do we have a program to parse?
		if (setupTopBlocks == null) {
			Console.getInstance().appendLine("<span class=\"error\">Parse Error: No program to parse.</span>");
			return null;
		}
		
		//Find the setup block.
		Setup setup = null;
		for (RenderableBlock rb : setupTopBlocks) {
			Block b = rb.getBlock();
			if (b.getGenusName().equals("setup")) {
				if (setup == null) {
					setup = new Setup(b);
				} else {
					Console.getInstance().appendLine("<span class=\"error\">Parse Error: Duplicate setup blocks.</span>");
					return null;
				}
			} else {
				Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: Orphaned top-level blocks will not be executed.</span>");
			}
		}
		
		if (setup == null) {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: No setup block. Assuming no setup routine.</span>");
		} else {
			parse(setup);
		}	
		
		return new Program(setup);
	}
	
	/**
	 * Parse the setup procedure.
	 * @param setup The setup procedure.
	 */
	private void parse(Setup setup) {
		BlockConnector connector = setup.block.getSocketAt(0);
		while (connector.hasBlock()) {
			Block block = Block.getBlock(connector.getBlockID());
			setup.addCommand(parseCommand(block));
			connector = block.getAfterConnector();
		}
	}
	
	/**
	 * Parse a command block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private Command parseCommand(Block b) {
		switch (b.getGenusName()) {
		case "print":
			return parsePrint(b);
		default:
			assert false : "Unrecognized block genus. (Should not occur.)";
			return null; //Code should not be reached.
		}
	}
	
	/**
	 * Parse a StringResult block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private StringResult parseStringResult(Block b) {
		switch (b.getGenusName()) {
		case "string":
			return new StringConstant(b);
		case "string-append":
			return parseStringConcat(b);
		case "num-to-string":
			return parseNumToString(b);
		case "bool-to-string":
			return parseBoolToString(b);
		default:
			assert false : "Unrecognized block genus. (Should not occur.)";
			return null; //Code should not be reached.
		}
	}
	
	/**
	 * Parse a NumberResult block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private NumberResult parseNumberResult(Block b) {
		switch (b.getGenusName()) {
		case "number":
			return new NumberConstant(b);
		default:
			assert false : "Unrecognized block genus. (Should not occur.)";
			return null; //Code should not be reached.
		}
	}
	
	/**
	 * Parse a NumberResult block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private BooleanResult parseBooleanResult(Block b) { 
		switch (b.getGenusName()) {
		case "true": //Combined case intentional.
		case "false":
			return new BooleanConstant(b);
		default:
			assert false : "Unrecognized block genus. (Should not occur.)";
			return null; //Code should not be reached.
		}
	}
	
	/**
	 * Parse a print block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private Print parsePrint(Block b) {
		assert b.getGenusName().equals("print") : "Method incorrectly called.";
		BlockConnector socket = b.getSocketAt(0);
		if (socket.hasBlock()) {
			return new Print(b, parseStringResult(Block.getBlock(socket.getBlockID())));
		} else {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: Print block missing argument. Assuming empty string.</span>");
			return new Print(b, DEFAULT_STRING_RESULT);
		}
	}
	
	/**
	 * Parse a string concatenation block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private StringConcat parseStringConcat(Block b) {
		assert b.getGenusName().equals("string-append") : "Method incorrectly called.";
		BlockConnector socket1 = b.getSocketAt(0);
		BlockConnector socket2 = b.getSocketAt(1);
		
		StringResult arg1, arg2;
		
		if (socket1.hasBlock()) {
			arg1 = parseStringResult(Block.getBlock(socket1.getBlockID()));
		} else {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: String append block missing argument. Assuming empty string.</span>");
			arg1 = DEFAULT_STRING_RESULT;
		}
		
		if (socket2.hasBlock()) {
			arg2 = parseStringResult(Block.getBlock(socket2.getBlockID()));
		} else {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: String append block missing argument. Assuming empty string.</span>");
			arg2 = DEFAULT_STRING_RESULT;
		}
		
		return new StringConcat(b, arg1, arg2);
	}
	
	/**
	 * Parse a number to string block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private NumToString parseNumToString(Block b) {
		assert b.getGenusName().equals("num-to-string") : "Method incorrectly called.";
		BlockConnector socket = b.getSocketAt(0);
		
		if (socket.hasBlock()) {
			return new NumToString(b, parseNumberResult(Block.getBlock(socket.getBlockID())));
		} else {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: Number-To-String block missing argument. Assuming 0 as value.</span>");
			return new NumToString(b, DEFAULT_NUMBER_RESULT);
		}
	}
	
	/**
	 * Parse a boolean to string block.
	 * @param b The block to parse.
	 * @return The resulting parse tree node.
	 */
	private BoolToString parseBoolToString(Block b) {
		assert b.getGenusName().equals("bool-to-string") : "Method incorrectly called.";
		BlockConnector socket = b.getSocketAt(0);
		
		if (socket.hasBlock()) {
			return new BoolToString(b, parseBooleanResult(Block.getBlock(socket.getBlockID())));
		} else {
			Console.getInstance().appendLine("<span class=\"warning\">Parse Warning: Boolean-To-String block missing argument. Assuming false as value.</span>");
			return new BoolToString(b, DEFAULT_BOOLEAN_RESULT);
		}
	}
}
